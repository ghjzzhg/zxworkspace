package cn.zx.ghjmaven.action.bc;	

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import cn.zx.ghjmaven.action.base.BaseAction;
import cn.zx.ghjmaven.domain.Myfile;
import cn.zx.ghjmaven.domain.UploadState;
import cn.zx.ghjmaven.utils.UploadFileUtils;

/** 
 * @author 作者 : 年轻的谷弟
 * @version 创建时间：2017年9月13日 下午4:19:38 
 * 类说明 ---上传文件类
 */
@Controller("fileAction")
@Scope("prototype")
@ParentPackage("ghjmaven")
@Namespace("/bc")
public class FileAction extends BaseAction<Myfile>{
	private Myfile myfile;
	String fieldName = "";
	String contentType = "";
	Boolean isFormField = true; 
	String fileName = "";
	
	@Action(value="fileAction_batchUpload",results={@Result(name="batchUpload",type="json")})
	public String batchUpload() throws IOException{
		System.err.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
		//获取路径
		String path = UploadFileUtils.path;
		File file = new File(path);
		
//		UploadFileUtils.upload4Stream(fileName, path, is);
		//判断此目录是否存在，不存在重新创建
		if (!file.exists() && !file.isDirectory()) {
			System.out.println("目录不存在，请重新创建");
			file.mkdir();
		}
		//使用apache的上传组件上传
		//1、创建DiskFileFactory的工厂
		DiskFileItemFactory factory = new DiskFileItemFactory();
		//2、创建一个上传解析器
		ServletFileUpload upload = new ServletFileUpload(factory);
		//3、设置文件名类型，防止乱码
		upload.setHeaderEncoding("UTF-8");
		//使用ServletFileUpload解析器解析数据，返回List集合
//			List<FileItem> list = upload.parseRequest(request);
		FileItem item = factory.createItem(fieldName, contentType, isFormField, fileName);
//			for (FileItem item : list) {
			//判断数据是否是普通输入行数据,不是
			if (item.isFormField()) {
				//获取普通输入行数据
				String name = item.getFieldName();
				//设置数据的类型
				String value = item.getString("UTF-8");
//				String value = new String(value.getBytes("iso8859-1"),"UTF-8");
				System.out.println(name + "=" + value);
			}else {
				//fileItem内封装的数据是请求的数据
				String name = item.getFieldName();
				System.out.println(name);
				if (name == null || name.trim().equals("")) {
					return "数据为空";
				}
				//不同浏览器的文件名的格式不同，有的带路径，不得不带，需要判断
				//只保留文件名
				name = name.substring(name.lastIndexOf("\\") + 1);
				//获取上传文件的输入流
				InputStream in = item.getInputStream();
				//创建文件输出流
				FileOutputStream out = new FileOutputStream(name);
				//创建文件缓冲区
				byte buffer[] = new byte[1024];
				//判断输入流缓冲区文件是否已经读完
				int len = 0;
				//循环将输入流数据读取到缓冲区，（len = in.read(buffer[]) > 0）即表示in中还有数据
				while ((len = in.read(buffer)) > 0) {
					//使用输出流将缓冲区的数据写入到指定的路径中
					out.write(buffer, 0, len);
				}
				//关闭输入流、输出流
				in.close();
				out.close();
				//删除之前的临时文件
				item.delete();
				UploadState uploadSuccsss = UploadState.UPLOAD_SUCCSSS;
			}
//			}
		return "batchUpload";
	}
	      
}
